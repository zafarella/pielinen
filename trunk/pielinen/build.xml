<project name="MUPE" default="compile" basedir=".">

  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>

  <property name="app.name"      value="MupeServer"/>
  <property name="contentclasses.name"      value="ContentClasses"/>
  <property name="core.name"     value="MupeCore"/>
  <property name="app.version"   value="1.03"/>
  <property name="build.home"    value="build"/>
  <property name="dist.home"     value="."/>
  <property name="src.home"      value="src"/>

  <property name="compile.debug"       value="false"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>

  <path id="compile.classpath">
    <pathelement path="../MupeCore.jar" /> 
    <pathelement path="../ContentClasses.jar" /> 
  </path>

<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,dist"
   description="Clean build and dist, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
  </target>



<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <javac srcdir="${src.home}"
          destdir="${build.home}"
           debug="${compile.debug}"
     deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
    </javac>
  </target>


<!-- ==================== Dist Target ===================================== -->


<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:
  * "deploy" so that the entire web application (including external
    dependencies) will have been assembled
  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="compile"
   description="Create binary distribution">

    <!-- Copy documentation subdirectory -->

<!--
    < copy    todir="${dist.home}/docs">
      <fileset dir="docs"/>
    </copy>
-->

    <!-- Create application JAR file -->
    <jar jarfile="${dist.home}/${app.name}.jar"
         basedir="${build.home}"/>

    <!-- Copy additional files to ${dist.home} as necessary -->

  </target>


<!-- ==================== Core Target ===================================== -->


  <target name="core" depends="compile"
   description="Create binary core distribution">


    <!-- Create core JAR file -->
    <jar jarfile="../${core.name}.jar"
         basedir="${build.home}" 
         includes="com/nokia/mupe/core/** com/nokia/mupe/context/** com/nokia/mupe/tools/** com/nokia/mid/**" />

    <!-- Copy additional files to ${dist.home} as necessary -->

  </target>

<!-- ==================== ContentClasses Target ===================================== -->


	  <target name="contentclasses" depends="compile"
	   description="Create binary core distribution">


	    <!-- Create core JAR file -->
	    <jar jarfile="../${contentclasses.name}.jar"
	         basedir="${build.home}" 
		 includes="com/nokia/mupe/server/**"
	  	 excludes="com/nokia/mupe/server/World.* com/nokia/mupe/server/BaseExtensions.* com/nokia/mupe/server/ServerDefaults.*" />
	  	<!-- Copy additional files to ${dist.home} as necessary -->

	  </target>
	
<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

    <mkdir          dir="docs/api"/>
    <javadoc sourcepath="${src.home}"
                destdir="docs/api"
           packagenames="com.nokia.mupe.*"
            windowtitle="MUPE Project API Documentation"
                    use="true"
		    footer="Copyright (c) 2003 Nokia and others.">		 
      <classpath refid="compile.classpath"/>

      <bottom><![CDATA[This document contains the API for <a href="http://www.mupe.net/">MUPE</a> - Multi-User Publishing Environment.
	See MUPE Documentation for further details.<BR> 
	${app.name} version ${app.version}.<BR>
	Use is subject to: 
	<a href="{@docRoot}/../../Nokia%20Open%20Source%20License%20(NOKOS%20License)%20Version%201.0a.txt">Nokia Open Source License (NOKOS License) Version 1.0a.</a>]]> 
      </bottom> 
    </javadoc>

  </target>



<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare">
    <mkdir  dir="${build.home}"/>
  </target>

</project>
